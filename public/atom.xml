<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Z . A . Y . F . E . N</title>
  
  <subtitle>CODING...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zayfen.com/"/>
  <updated>2019-11-18T09:37:45.318Z</updated>
  <id>https://zayfen.com/</id>
  
  <author>
    <name>zayfen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见WEB安全防御</title>
    <link href="https://zayfen.com/2019/11/18/f97ef80c3fff95b1c02a4a937d666b66/"/>
    <id>https://zayfen.com/2019/11/18/f97ef80c3fff95b1c02a4a937d666b66/</id>
    <published>2019-11-18T09:28:42.604Z</published>
    <updated>2019-11-18T09:37:45.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB安全"><a href="#WEB安全" class="headerlink" title="WEB安全"></a>WEB安全</h1><p>[TOC]</p><h2 id="一、漏洞分类"><a href="#一、漏洞分类" class="headerlink" title="一、漏洞分类"></a>一、漏洞分类</h2><ul><li>XSS漏洞</li><li>CSRF漏洞</li><li>SSRF漏洞</li><li>SQL漏洞</li></ul><p>二、各种漏洞介绍<br><strong>XSS漏洞</strong></p><ol><li><p>什么是XSS漏洞<br>XSS漏洞全称跨站脚本攻击，英文全称 Cross-site Scripting, 为了不和css名字重复，所以取名XSS. XSS漏洞主要是能够利用代码的漏洞，通过一些技巧在浏览器端执行非法的javascript脚本，这些非法的javascript脚本拥有当前登录用户的权限，可以执行一些非法操作，从而给用户或者企业带来损失。</p></li><li><p>XSS漏洞的种类</p></li></ol><a id="more"></a><ul><li>DOM型XSS</li></ul><p>这个是最常见的一个XSS漏洞了，在在浏览器端操作DOM时产生。比如，在一个input中输入一个字符串，并将字符串显示在页面中，如果没有对字符串做校验就可能会产生DOM型xss漏洞。<br>例子：</p><p><a href="https://pastebin.com/C1inFY9n" target="_blank" rel="noopener">https://pastebin.com/C1inFY9n</a></p><p><a href="https://pastebin.com/C1inFY9n" target="_blank" rel="noopener">https://pastebin.com/C1inFY9n</a></p><ul><li>反射型XSS</li></ul><p>反射型XSS是发送到服务端的数据没有做参数的校验和过滤，只是简单地把用户输入的数据”反射”给浏览器,导致在浏览器中渲染处理参数时引入了js脚本。反射型XSS也叫做”非持久型XSS” (Non-persistent XSS)</p><ul><li>存储型XSS .</li></ul><p>存储型XSS会把用户输入的数据”存储”在服务端, 这种XSS具有很强的稳定性.最常见的一种情况就是,在博客中写一段包含有恶意javascript代码发表, 这段恶意的代码就会随着博客内容存储到数据库中,如何人访问这篇博客都会受到攻击</p><hr><ol start="3"><li>XSS漏洞的危害<br>a. 窃取cookie,登录别人账户<br>攻击者可以构造一个链接,当被攻击者点击了这个链接之后,会触发xss漏洞,就会执行一个js脚本,该js脚本会携带cookie信息通过img标签或者script标签等可以跨域访问的标签将信息发送给攻击者.<br>b. 构造GET和POST请求,删除或者篡改受害者信息<br>比如有个删除文章的接口: <a href="http://blog.abc.com/delete?id=post_idxxx" target="_blank" rel="noopener">http://blog.abc.com/delete?id=post_idxxx</a>, 当攻击者知道被攻击者的一篇文章的id的时候,就可以通过xss payload来请求删除文章的接口, 修改被攻击者信息同理.<br>c. XSS钓鱼<br>xss的攻击过程都是需要在浏览器中通过javascript自动执行的.如果在攻击的过程中存在和用户交互的情况就比较麻烦了,比如需要输入旧密码或者输入图片上的验证码,虽然比较麻烦,但是我们还是可以实施xss攻击的,比如把显示验证码的图片地址发送给攻击者,或者制作一个长得一模一样的输入帐号密码的界面欺骗被攻击者.这些攻击方法就是xss钓鱼.<br>d. 识别用户的浏览器,利用浏览器的漏洞对系统进行攻击<br>浏览器有漏洞,虽然浏览器会通过更新来解决这些漏洞,但是不能保证所有的人都更新到最新版本,当检测到有漏洞的浏览器版本,就可以通过浏览器漏洞对系统进行攻击.<br>e. 识别用户安装的软件执行挂马攻击<br>在IE中可以通过判断 ActieX空间的classid是否存在来判断用户是否安装了软件.黑客通过判断被攻击者安装的软件,选择对应的浏览器漏洞,最终达到植入木马的目的.<br>比如在IE中通过如下的代码就可以判断用户是否安装了迅雷:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> ActiveXObject(<span class="string">'XunLeiBHO.ThunderIEHelper'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// 异常, 没有安装此软件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (obj) &#123;</span><br><span class="line">  <span class="comment">// 安装了迅雷</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>另外,可以通过flash的一个 system.capabilities对象来找出电脑的硬件信息,还可以通过判断特定的DOM来判断浏览器安装了哪些插件.</p><p>通过xss攻击还可以知道被攻击者访问了哪些页面(通过 :visited 伪元素判断), 还可以在jre环境中通过调用Java Applete的接口获取客户端的本地ip地址.</p><ol start="4"><li><p>XSS的防御<br>a. HttpOnly<br>通过在cookie中设置HttpOnly这个属性,可以阻止javascript访问cookie内容.<br>b. 输入检查<br>对输入的值进行字符类型,字符长度检查,比如手机号码,不能出现字母,而且长度为11, 对一些特殊字符,比如尖括号进行转义编码,或者一些特殊的字符串进行过滤,比如 <code>&lt;script&gt;, javascript:</code>.<br>c. 输出检查<br>执行安全的编码函数, htmlEncode, javascriptEncode.<br>在html中输出变量$var,使用 htmlEncode对$var进行编码.<br>在html中的onclick等事件中输出,使用javascript对$var编码<br>在javascript中输出$var, 使用 javascript对$var编码<br>在css中,禁止变量输出,即不要在style中使用$var变量<br>在地址中输出,使用urlEncode<br>d. 处理富文本<br>通过htmlparser解析文本,过滤掉危险标签 <code>&lt;iframe&gt;, &lt;script&gt;, &lt;base&gt;, &lt;form&gt;</code>等, 在富文本中可选择的标签使用白名单,避免使用黑名单,即指定富文本中只能使用哪几种标签.<br>e.编写代码时,注意这些地方;</p><pre><code class="javascript"> <span class="built_in">document</span>.write(); <span class="built_in">document</span>.writeln(); xxx.innerHTML(); xxx.outerHTML(); innerHTML.replace(); <span class="built_in">document</span>.attachEvent(); <span class="built_in">window</span>.attachEvent(); <span class="built_in">document</span>.location.replace(); <span class="built_in">document</span>.location.assign(); <span class="comment">// 页面中所有的input输入框</span> <span class="built_in">window</span>.location(href, hash, ...) <span class="built_in">window</span>.name <span class="built_in">document</span>.referrer <span class="built_in">document</span>.cookie localstorage XMLHttpRequest <span class="comment">// 主要是返回的数据</span><span class="string">``</span><span class="string">`javascript</span><span class="string"></span></code></pre></li></ol><p><strong>CSRF漏洞</strong><br>CSRF漏洞,全称Cross Site Request Forgery<a href="跨站请求伪造">/ˈfɔːdʒəri/ 伪造</a>, 比如存在一个转账的接口:<br><a href="http://bank.com/transform/?money=xxx&amp;to=zzz" target="_blank" rel="noopener">http://bank.com/transform/?money=xxx&amp;to=zzz</a>;  攻击者可以伪造一个链接 <a href="http://bank.com/transform/?money=1&amp;o=lisi" target="_blank" rel="noopener">http://bank.com/transform/?money=1&amp;o=lisi</a>, 诱惑用户点击这个链接,那么用户在神不知鬼不觉之下就转移了1元钱给李四, 这个伪造的链接可以放到一个网页的img标签中, 当用户点击这个网页的时候,钱就被神不知鬼不觉的转走了. 为什么伪造的请求会请求通过呢?因为用户的浏览器成功的发送了Cookie给服务器.</p><p>防御方法: 增加一个随机的token, 每次转账的时候都要带上这个随机额token, 同事后台需要校验token的正确性,比如 <a href="http://bank.com/transform/?money=xxx&amp;to=zzz&amp;token=abcUx23Flzd" target="_blank" rel="noopener">http://bank.com/transform/?money=xxx&amp;to=zzz&amp;token=abcUx23Flzd</a>, 这样攻击者不知道token的情况下,构造的链接就会无效.</p><p><strong>点击劫持(ClickJacking)</strong><br>点击劫持是一种视觉上的欺骗手段.攻击者使用一个透明的iframe,覆盖在一个网页上,然后诱使用户在网页上进行操作,通过调整iframe的位置,当用户点击一个按钮的时候,其实是点击在iframe上的一个功能按钮上.</p><p>点击劫持有:</p><ul><li>Flash点击劫持</li><li>图片覆盖攻击</li><li>拖拽劫持与数据窃取</li><li>触屏劫持</li></ul><p>防御:<br>禁止跨域的iframe来防御, 使用HTTP头  X-Frame-Options, X-Frame-Options有3个选项, DENY, SAMEORIGIN, ALLOW-FROM origin</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WEB安全&quot;&gt;&lt;a href=&quot;#WEB安全&quot; class=&quot;headerlink&quot; title=&quot;WEB安全&quot;&gt;&lt;/a&gt;WEB安全&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;&lt;h2 id=&quot;一、漏洞分类&quot;&gt;&lt;a href=&quot;#一、漏洞分类&quot; class=&quot;headerlink&quot; title=&quot;一、漏洞分类&quot;&gt;&lt;/a&gt;一、漏洞分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;XSS漏洞&lt;/li&gt;
&lt;li&gt;CSRF漏洞&lt;/li&gt;
&lt;li&gt;SSRF漏洞&lt;/li&gt;
&lt;li&gt;SQL漏洞&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;二、各种漏洞介绍&lt;br&gt;&lt;strong&gt;XSS漏洞&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是XSS漏洞&lt;br&gt;XSS漏洞全称跨站脚本攻击，英文全称 Cross-site Scripting, 为了不和css名字重复，所以取名XSS. XSS漏洞主要是能够利用代码的漏洞，通过一些技巧在浏览器端执行非法的javascript脚本，这些非法的javascript脚本拥有当前登录用户的权限，可以执行一些非法操作，从而给用户或者企业带来损失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;XSS漏洞的种类&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="web" scheme="https://zayfen.com/categories/web/"/>
    
    
      <category term="web" scheme="https://zayfen.com/tags/web/"/>
    
      <category term="security" scheme="https://zayfen.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>搜索算法</title>
    <link href="https://zayfen.com/2019/11/18/b7d273159f6becc31fc5174ea7582c5e/"/>
    <id>https://zayfen.com/2019/11/18/b7d273159f6becc31fc5174ea7582c5e/</id>
    <published>2019-11-18T08:33:55.543Z</published>
    <updated>2019-11-18T08:50:21.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线性搜索"><a href="#线性搜索" class="headerlink" title="线性搜索"></a>线性搜索</h3><p>线性搜索也是最简单的搜索算法，简单来说，就是对一个数组或者顺序容器，进行从头到尾的遍历，一个一个的找到目标元素<br><img src="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/Linear.png" alt="image"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单的线性搜索算法实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linear_search</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; vec, <span class="keyword">const</span> T&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; element : vec) &#123;</span><br><span class="line">    index++;</span><br><span class="line">    <span class="keyword">if</span>(element == x) &#123;</span><br><span class="line">      <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>时间复杂度： O(N)</strong></p><hr><h3 id="二分查找（Binary-Search）"><a href="#二分查找（Binary-Search）" class="headerlink" title="二分查找（Binary Search）"></a>二分查找（Binary Search）</h3><p>二分查找，是给定一个有序的数组或者顺序容器，每次取容器的中间位置的元素和目标元素对比来缩短查找的范围。过程可以简单描述如下：<br><img src="https://www.geeksforgeeks.org/wp-content/uploads/gq/2014/01/binary-search1.png" alt="image"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二分查找</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; vec, <span class="keyword">const</span> <span class="keyword">int</span> low, <span class="keyword">const</span> <span class="keyword">int</span> high, <span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"binary_search low "</span> &lt;&lt; low &lt;&lt; <span class="string">"  high "</span> &lt;&lt; high &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">if</span> (low &gt; high) &#123; <span class="comment">// 没有找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> middle = low + (high - low) / <span class="number">2</span>; <span class="comment">// 搜索区间缩短一半</span></span><br><span class="line">  <span class="keyword">if</span> (x == vec.at(middle)) &#123;</span><br><span class="line">    <span class="keyword">return</span> middle;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> low_ = vec.at(middle) &gt; x ? low : middle + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> high_ = vec.at(middle) &gt; x ? middle - <span class="number">1</span> : high;</span><br><span class="line">  <span class="keyword">return</span> binary_search(vec, low_, high_, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度： O(LogN)</strong></p><hr><h3 id="跳跃查找（Jump-Search）"><a href="#跳跃查找（Jump-Search）" class="headerlink" title="跳跃查找（Jump Search）"></a>跳跃查找（Jump Search）</h3><p>给定一个有序的顺序容器，容器宗有n个元素， 将元素分成m份，每份 n/m 个元素。然后我们按照每n/m个元素间隔去查找元素，找到要搜索的元素所在的区间[i, i+n/m), 然后在这个区间中<br>判断值<br><img src="https://res.cloudinary.com/zayfen/image/upload/v1574065062/img/jrebsdjju8ez4ggz3lrn.png" alt="image"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">jump_search</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; vec, <span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vec.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">int</span> stepWidth = <span class="built_in">std</span>::<span class="built_in">sqrt</span>(vec.size());</span><br><span class="line">  <span class="keyword">int</span> prevStepIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> stepIndex = <span class="built_in">std</span>::min(stepWidth, <span class="keyword">int</span>(vec.size())) - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">while</span> (vec.at(stepIndex) &lt; x) &#123;</span><br><span class="line">    prevStepIndex = stepIndex;</span><br><span class="line">    stepIndex = <span class="built_in">std</span>::min(stepWidth + stepIndex, <span class="keyword">int</span>(vec.size() - <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (prevStepIndex == stepIndex) &#123; <span class="comment">// 到达尾部，没有找到x元素</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ignore all elements less than x</span></span><br><span class="line">  <span class="keyword">while</span> (vec.at(prevStepIndex) &lt; x) &#123;</span><br><span class="line">    prevStepIndex++;</span><br><span class="line">    <span class="keyword">if</span> (prevStepIndex &gt;= vec.size()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// if element found</span></span><br><span class="line">  <span class="keyword">if</span> (vec.at(prevStepIndex) == x) &#123;</span><br><span class="line">    <span class="keyword">return</span> prevStepIndex;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>算法分析<br>寻找要查找的元素所在的区间，最大需要为 m - 1次比较，再区间段中最大需要n/m次比较 ，所以时间复杂度是 O((m-1) + n/m),<br>要使 (m-1) + n/m 最小，需要 m = sqrt(n),所有， 时间复杂度是 O(sqrt(n) - 1 + n/sqrt(n)) 也就是  O(sqrt(n))</li></ul><p>让 n/m+m-1 = 0,</p><p>jump search 的时间复杂度，是介于线性查找和二分查找之间的，所以jump search 的性能没有比二分查找要好，但是jump search 有一个好处，就是他只需要回退一次，加入我们要查找一个最小的元素，jump search 只需要查找一个，而二分查找需要查满，这种情况下，jump search 是优于 二分查找的。<br><img src="https://res.cloudinary.com/zayfen/image/upload/v1574065247/img/oo88hrbld592stbd6lq2.png" alt="image"></p><hr><h3 id="差值搜索-（Interpolation-Search）"><a href="#差值搜索-（Interpolation-Search）" class="headerlink" title="差值搜索 （Interpolation Search）"></a>差值搜索 （Interpolation Search）</h3><p>差值搜索是对二分搜索的优化，二分搜索永远都是从搜索区间的中间位置开始切分，而差值搜索会从选择从要搜索的元素最接近的位置开始切分，这样就有利于尽快的找到要搜索的元素</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">position</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; vec, <span class="keyword">const</span> T&amp; x, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> low + (high - low) * ((x - vec.at(low)) / (vec.at(high) - vec.at(low)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">interpolation_search</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; vec, <span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> high = vec.size() - <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (low &lt;= high &amp;&amp; x &gt;= vec.at(low) &amp;&amp; x &lt;= vec.at(high)) &#123;</span><br><span class="line">    <span class="keyword">int</span> pos = position(vec, x, low, high);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position is %d \n"</span>, pos);</span><br><span class="line">    <span class="keyword">if</span> (vec.at(pos) == x) &#123;</span><br><span class="line">      <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (vec.at(pos) &lt; x) &#123;</span><br><span class="line">      low = pos + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    high = pos - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>算法分析：<br>如果顺序容器中的元素是均匀分布的，那么就是时间复杂度就是 O(log log n)), 最坏的情况是 O(n)<div class="pdf" target="/Assets/p550-perl.pdf" height></div></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;线性搜索&quot;&gt;&lt;a href=&quot;#线性搜索&quot; class=&quot;headerlink&quot; title=&quot;线性搜索&quot;&gt;&lt;/a&gt;线性搜索&lt;/h3&gt;&lt;p&gt;线性搜索也是最简单的搜索算法，简单来说，就是对一个数组或者顺序容器，进行从头到尾的遍历，一个一个的找到目标元素&lt;br&gt;&lt;img src=&quot;https://cdncontribute.geeksforgeeks.org/wp-content/uploads/Linear.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 简单的线性搜索算法实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;linear_search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;T&amp;gt;&amp;amp; vec, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; T&amp;amp; x)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&amp;amp; element : vec) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    index++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(element == x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="algorithm" scheme="https://zayfen.com/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="https://zayfen.com/tags/algorithm/"/>
    
      <category term="search" scheme="https://zayfen.com/tags/search/"/>
    
  </entry>
  
  <entry>
    <title>Chrome调试微信web页面</title>
    <link href="https://zayfen.com/2019/11/17/302d853864089ff3288321c00a69a043/"/>
    <id>https://zayfen.com/2019/11/17/302d853864089ff3288321c00a69a043/</id>
    <published>2019-11-18T05:00:00.000Z</published>
    <updated>2019-11-18T07:36:29.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何用Chrome调试微信web页面"><a href="#如何用Chrome调试微信web页面" class="headerlink" title="如何用Chrome调试微信web页面"></a>如何用Chrome调试微信web页面</h2><blockquote><p>微信调试有官方的微信开发者工具，这个工具很方便，但是有一个不方便就是调试公众号页面的时候，需要公众号给你授予开发者权限，<br>但是有的时候，你仅仅只是想调试页面的样式和一些dom结构，这个时候直接用chrome调试微信web页面就显得特别方便了。</p></blockquote><h3 id="步骤（此处仅仅在android手机上做了测试）"><a href="#步骤（此处仅仅在android手机上做了测试）" class="headerlink" title="步骤（此处仅仅在android手机上做了测试）"></a>步骤（此处仅仅在android手机上做了测试）</h3><h4 id="1-打开android手机的开发者模式-和-usb调试"><a href="#1-打开android手机的开发者模式-和-usb调试" class="headerlink" title="1. 打开android手机的开发者模式 和 usb调试"></a>1. 打开android手机的开发者模式 和 usb调试</h4><blockquote><p>每个手机打开方式都不一样，请自行搜索解决方案</p></blockquote><a id="more"></a><h4 id="2-打开chrome的-Remote-Devices"><a href="#2-打开chrome的-Remote-Devices" class="headerlink" title="2. 打开chrome的 Remote Devices"></a>2. 打开chrome的 <code>Remote Devices</code></h4><p><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456083/img/xfln0smfyyrmta2cgfbg.png" alt></p><h4 id="3-手机连接电脑"><a href="#3-手机连接电脑" class="headerlink" title="3. 手机连接电脑"></a>3. 手机连接电脑</h4><blockquote><p>手机连接电脑的时候，会弹出一个usb授权提示弹窗，点解<code>确定</code></p></blockquote><h4 id="4-在Chrome上的-Remote-Devices上查看链接的手机情况"><a href="#4-在Chrome上的-Remote-Devices上查看链接的手机情况" class="headerlink" title="4. 在Chrome上的 Remote Devices上查看链接的手机情况"></a>4. 在Chrome上的 <code>Remote Devices</code>上查看链接的手机情况</h4><p><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456090/img/sebny1fdphicnkfmisgx.png" alt></p><h4 id="5-调试手机上的页面"><a href="#5-调试手机上的页面" class="headerlink" title="5. 调试手机上的页面"></a>5. 调试手机上的页面</h4><blockquote><p>点击要调试的页面的右边的 <code>Inspect</code>按钮，就可以打开进行调试了。 <strong>但是这个时候我们发现仅仅只能看到浏览器的页面，没有看到微信的web页面</strong></p></blockquote><h4 id="6-手机微信打开-http-debugx5-qq-com-并勾选-打开TBS内核Inspector调试功能"><a href="#6-手机微信打开-http-debugx5-qq-com-并勾选-打开TBS内核Inspector调试功能" class="headerlink" title="6. 手机微信打开 http://debugx5.qq.com, 并勾选 打开TBS内核Inspector调试功能"></a>6. 手机微信打开 <a href="http://debugx5.qq.com" target="_blank" rel="noopener">http://debugx5.qq.com</a>, 并勾选 <code>打开TBS内核Inspector调试功能</code></h4><p><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456094/img/xa7exyod0yyavarj1w7f.jpg" alt></p><blockquote><p>勾选后会提示重启，点击确定就行</p></blockquote><h4 id="7-微信上打开要调试的web-页面，就可以在chrome中看到了"><a href="#7-微信上打开要调试的web-页面，就可以在chrome中看到了" class="headerlink" title="7. 微信上打开要调试的web 页面，就可以在chrome中看到了"></a>7. 微信上打开要调试的web 页面，就可以在chrome中看到了</h4><p><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456098/img/nz3ismpqljduymsinjq0.jpg" alt><br><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456100/img/fo5afmbyo4uvj7qgrgop.png" alt></p><h4 id="8-点击chrome中-inspect按钮及可以开始调试了"><a href="#8-点击chrome中-inspect按钮及可以开始调试了" class="headerlink" title="8. 点击chrome中 inspect按钮及可以开始调试了"></a>8. 点击chrome中 <code>inspect</code>按钮及可以开始调试了</h4><p><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456105/img/irjrryrjdx9eq0rqg7pb.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何用Chrome调试微信web页面&quot;&gt;&lt;a href=&quot;#如何用Chrome调试微信web页面&quot; class=&quot;headerlink&quot; title=&quot;如何用Chrome调试微信web页面&quot;&gt;&lt;/a&gt;如何用Chrome调试微信web页面&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;微信调试有官方的微信开发者工具，这个工具很方便，但是有一个不方便就是调试公众号页面的时候，需要公众号给你授予开发者权限，&lt;br&gt;但是有的时候，你仅仅只是想调试页面的样式和一些dom结构，这个时候直接用chrome调试微信web页面就显得特别方便了。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3 id=&quot;步骤（此处仅仅在android手机上做了测试）&quot;&gt;&lt;a href=&quot;#步骤（此处仅仅在android手机上做了测试）&quot; class=&quot;headerlink&quot; title=&quot;步骤（此处仅仅在android手机上做了测试）&quot;&gt;&lt;/a&gt;步骤（此处仅仅在android手机上做了测试）&lt;/h3&gt;&lt;h4 id=&quot;1-打开android手机的开发者模式-和-usb调试&quot;&gt;&lt;a href=&quot;#1-打开android手机的开发者模式-和-usb调试&quot; class=&quot;headerlink&quot; title=&quot;1. 打开android手机的开发者模式 和 usb调试&quot;&gt;&lt;/a&gt;1. 打开android手机的开发者模式 和 usb调试&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;每个手机打开方式都不一样，请自行搜索解决方案&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web" scheme="https://zayfen.com/categories/web/"/>
    
    
      <category term="wechat" scheme="https://zayfen.com/tags/wechat/"/>
    
      <category term="debugger" scheme="https://zayfen.com/tags/debugger/"/>
    
      <category term="web" scheme="https://zayfen.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>解决JPEG图片显示方向不正确的问题</title>
    <link href="https://zayfen.com/2019/11/17/d3c4828a43569ce3ca593dc66b1eb668/"/>
    <id>https://zayfen.com/2019/11/17/d3c4828a43569ce3ca593dc66b1eb668/</id>
    <published>2019-11-18T05:00:00.000Z</published>
    <updated>2019-11-18T07:34:38.739Z</updated>
    
    <content type="html"><![CDATA[<p>背景： 一些jpeg图片，在pc中用图片查看器打开是正的，但是放到浏览器中，就横着了；有一个上传人脸的需求，用手机拍完人脸照片，在应用中显示所拍的照片总是横着的。今天，我们就来解决这个问题。</p><h3 id="为什么JEPG图片会横着显示？"><a href="#为什么JEPG图片会横着显示？" class="headerlink" title="为什么JEPG图片会横着显示？"></a>为什么JEPG图片会横着显示？</h3><p>首先，我们看一个github上的一个关于此问题的issue：<br><a href="https://github.com/GoogleChromeLabs/squoosh/issues/299" target="_blank" rel="noopener">https://github.com/GoogleChromeLabs/squoosh/issues/299</a><br>这个问题讨论的是chrome显示jpeg图片，旋转了90度的问题。<br>为什么会旋转呢？因为JEPG图片的EXIF data中有一个控制旋转的属性<strong>Orientation</strong>，但是有一些应用程序显示图片的时候会忽略这个属性，就导致图片在一些应用程序中显示出来和原本的方向不一致。</p><a id="more"></a><p>这里有一张JEPG图片的EXIF数据（可以看到第一个属性就是 Orientation）：<br><img src="https://res.cloudinary.com/zayfen/image/upload/v1570695926/img/ibvnab25sqxnz4ahapu6.png" alt="JPEG图片的EXIF数据"></p><h3 id="让图片永远都正着显示"><a href="#让图片永远都正着显示" class="headerlink" title="让图片永远都正着显示"></a>让图片永远都正着显示</h3><p>因为 JPEG的 <strong>Orientation</strong> 属性被忽略了，那么当检测到图片Orientation的值表示需要旋转的时候，我们就主动将JPEEG图片旋转，并且改正或者去掉新图片的<strong>Orientation</strong> 字段。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用exif-js 这个库去获取jpeg图片的EXIF元数据 (https://github.com/exif-js/exif-js)</span></span><br><span class="line"><span class="comment">// 旋转图片的工具,(旋转之后的图片的EXIF data被移除)</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> * <span class="keyword">as</span> EXIF <span class="keyword">from</span> <span class="string">'exif-js'</span>  <span class="comment">// npm install exif-js</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// &lt;img id="show-image" /&gt;,用来显示旋转后的图像</span></span><br><span class="line"> <span class="keyword">var</span> image = <span class="built_in">document</span>.getElementById(<span class="string">'show-image'</span>) </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// &lt;input id="image-input" type="file" name="imag" /&gt;</span></span><br><span class="line"> <span class="keyword">var</span> imageInput = <span class="built_in">document</span>.getElementById(<span class="string">'image-input'</span>) </span><br><span class="line"> imageInput.onchange = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"onchange: ..."</span>)</span><br><span class="line">   <span class="keyword">let</span> file = evt.target.files[<span class="number">0</span>]</span><br><span class="line">   rotateImage(file).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">     image.src = data.base64</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fileToBinary</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 读取图片数据</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">        reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.result <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>) &#123;</span><br><span class="line">            <span class="comment">// resolve(new Uint8Array(reader.result))</span></span><br><span class="line">            resolve(<span class="keyword">this</span>.result)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reader.readAsArrayBuffer(file)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Blob 对象以fileName文件名下载下来</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">downloadBlob</span> (<span class="params">blob, fileName</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">      <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">      link.href = url</span><br><span class="line">      link.setAttribute(<span class="string">'download'</span>, fileName)</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(link)</span><br><span class="line">      link.click()</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(link) <span class="comment">// 下载完成移除元素</span></span><br><span class="line">      <span class="built_in">window</span>.URL.revokeObjectURL(url) <span class="comment">// 释放掉blob对象      </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rotateImage</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fileToBinary(file).then(<span class="function">(<span class="params">binaryFile</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> meta = EXIF.readFromBinaryFile(binaryFile)</span><br><span class="line">          <span class="keyword">let</span> orientation = meta.Orientation</span><br><span class="line">          <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line">          <span class="keyword">let</span> rotationMap = &#123; <span class="number">3</span>: <span class="number">180</span>, <span class="number">6</span>: <span class="number">90</span>, <span class="number">8</span>: <span class="number">270</span> &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 不需要旋转</span></span><br><span class="line">          <span class="keyword">if</span> (meta === <span class="literal">false</span> || !rotationMap[orientation]) &#123;</span><br><span class="line">            formData.append(<span class="string">'file'</span>, file, <span class="string">'face.jpeg'</span>)</span><br><span class="line">            <span class="keyword">return</span> resolve(&#123; <span class="attr">base64</span>: <span class="string">''</span>, <span class="attr">formData</span>: formData, <span class="attr">rotated</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> rotationDegree = <span class="number">0</span></span><br><span class="line">          <span class="keyword">let</span> targetWidth = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">          rotationDegree = rotationMap[orientation] || <span class="number">0</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> image = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">          image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">            <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> rate = <span class="built_in">Math</span>.min(targetWidth / image.width, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">let</span> imageWidth = image.width * rate</span><br><span class="line">            <span class="keyword">let</span> imageHeight = image.height * rate</span><br><span class="line">            <span class="keyword">if</span> (rotationDegree === <span class="number">90</span> || rotationDegree === <span class="number">270</span>) &#123;</span><br><span class="line">              canvas.width = imageHeight</span><br><span class="line">              canvas.height = imageWidth</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              canvas.width = image.width</span><br><span class="line">              canvas.height = image.height</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ctx.fillStyle = <span class="string">'rgba(255, 255, 255, 0)'</span></span><br><span class="line"></span><br><span class="line">            ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line"></span><br><span class="line">            ctx.save()</span><br><span class="line">            ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">            ctx.translate(canvas.width / <span class="number">2</span>, canvas.height / <span class="number">2</span>)</span><br><span class="line">            ctx.rotate(rotationDegree * <span class="built_in">Math</span>.PI / <span class="number">180</span>)</span><br><span class="line">            <span class="keyword">if</span> (rotationDegree === <span class="number">90</span> || rotationDegree === <span class="number">270</span>) &#123;</span><br><span class="line">              ctx.drawImage(image, -canvas.height / <span class="number">2</span>, -canvas.width / <span class="number">2</span> + (canvas.width - imageHeight) / <span class="number">2</span>, imageWidth, imageHeight)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              ctx.drawImage(image, -canvas.width / <span class="number">2</span>, -canvas.height / <span class="number">2</span>, imageWidth, imageHeight)</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.restore()</span><br><span class="line"></span><br><span class="line">            canvas.toBlob(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">              formData.append(<span class="string">'file'</span>, blob, <span class="string">'face.jpeg'</span>)</span><br><span class="line">              <span class="keyword">let</span> base64 = canvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">0.8</span>)</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'rotated image  blob: '</span>, blob)</span><br><span class="line">              <span class="comment">// downloadBlob(blob, '123.jpg')  // 下载图片</span></span><br><span class="line">              resolve(&#123; <span class="attr">base64</span>: base64, <span class="attr">rotated</span>: <span class="literal">true</span>, <span class="attr">formData</span>: formData &#125;)</span><br><span class="line">            &#125;, <span class="string">'image/jpeg'</span>, <span class="number">0.8</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          image.src = URL.createObjectURL(file)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>例子效果：</strong><br><img src="https://res.cloudinary.com/zayfen/image/upload/v1571232577/img/y8zxcjibljhul5nr1cab.png" alt="旋转图片的例子"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景： 一些jpeg图片，在pc中用图片查看器打开是正的，但是放到浏览器中，就横着了；有一个上传人脸的需求，用手机拍完人脸照片，在应用中显示所拍的照片总是横着的。今天，我们就来解决这个问题。&lt;/p&gt;&lt;h3 id=&quot;为什么JEPG图片会横着显示？&quot;&gt;&lt;a href=&quot;#为什么JEPG图片会横着显示？&quot; class=&quot;headerlink&quot; title=&quot;为什么JEPG图片会横着显示？&quot;&gt;&lt;/a&gt;为什么JEPG图片会横着显示？&lt;/h3&gt;&lt;p&gt;首先，我们看一个github上的一个关于此问题的issue：&lt;br&gt;&lt;a href=&quot;https://github.com/GoogleChromeLabs/squoosh/issues/299&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/GoogleChromeLabs/squoosh/issues/299&lt;/a&gt;&lt;br&gt;这个问题讨论的是chrome显示jpeg图片，旋转了90度的问题。&lt;br&gt;为什么会旋转呢？因为JEPG图片的EXIF data中有一个控制旋转的属性&lt;strong&gt;Orientation&lt;/strong&gt;，但是有一些应用程序显示图片的时候会忽略这个属性，就导致图片在一些应用程序中显示出来和原本的方向不一致。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://zayfen.com/categories/web/"/>
    
    
      <category term="jpg" scheme="https://zayfen.com/tags/jpg/"/>
    
      <category term="image" scheme="https://zayfen.com/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用操作</title>
    <link href="https://zayfen.com/2019/11/13/a43fd1c509d10e4d08fc1f789d58cb23/"/>
    <id>https://zayfen.com/2019/11/13/a43fd1c509d10e4d08fc1f789d58cb23/</id>
    <published>2019-11-14T05:00:00.000Z</published>
    <updated>2019-11-15T06:54:20.351Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/zayfen/image/upload/v1568171685/img/l8yeyxvtfw6kplg1ci67.png" alt="git flow"></p><h3 id="漂亮打印git-log"><a href="#漂亮打印git-log" class="headerlink" title="漂亮打印git log"></a>漂亮打印git log</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset'</span> --abbrev-commit --date=relative</span><br></pre></td></tr></table></figure><h3 id="添加修改或者新文件到待commit队列"><a href="#添加修改或者新文件到待commit队列" class="headerlink" title="添加修改或者新文件到待commit队列"></a>添加修改或者新文件到待commit队列</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### add 的文件是支持正则匹配的</span></span><br><span class="line">git add &lt;file(s)&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### add all changes to commiter queue</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看某个commit的修改内容</span></span><br><span class="line">git show &lt;commit-id&gt;</span><br><span class="line">git diff &lt;commit-id&gt;^!</span><br><span class="line"><span class="comment">##### e.g. git show d34ff657f5   git diff d34ff657f5^!</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">### 提交已添加的文件到本地仓库并创建一个新的版本</span></span><br><span class="line">```sh</span><br><span class="line">git commit -m <span class="string">"commit message"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### also can combine git add &amp; git commit in one command</span></span><br><span class="line">git commit -m <span class="string">"commit message"</span> -a</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### origin 是仓库名（默认就是origin），branch_name 是分支名</span></span><br><span class="line">git push origin &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="创建一个仓库"><a href="#创建一个仓库" class="headerlink" title="创建一个仓库"></a>创建一个仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### from existed repo </span></span><br><span class="line">git <span class="built_in">clone</span> &lt;repo-url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### create a new local repo</span></span><br><span class="line">git init [&lt;<span class="built_in">local</span>-directory&gt;]</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看本地和远端的分支</span></span><br><span class="line">git branch -va</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看本地分支和远程分支的对应关系</span></span><br><span class="line">git remote show &lt;repo-name&gt; <span class="comment">## git remote show origin</span></span><br></pre></td></tr></table></figure><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 仅仅创建一个新分支在本地</span></span><br><span class="line">git checkout &lt;new-branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 创建一个分支，并且将工作区切换到新创建的分支</span></span><br><span class="line">git checkout -b &lt;new-branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 拉取远程分支到本地，并切换分支</span></span><br><span class="line">git checkout -b &lt;<span class="built_in">local</span>-branch-name&gt; &lt;repo-name&gt;/&lt;remote-branch-name&gt;</span><br><span class="line"><span class="comment">#### e.g.: git checkout -b test origin/test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 把远程分支拉取到本地，不切换分支 (--tranck 选项现在是默认的了)</span></span><br><span class="line">git branch &lt;<span class="built_in">local</span>-branch-name&gt; &lt;repo-name&gt;/&lt;remote-branch-name&gt; [--track]</span><br><span class="line"><span class="comment">#### e.g.: git branch test origin/test</span></span><br></pre></td></tr></table></figure><h3 id="将本地分支推送到远程仓库"><a href="#将本地分支推送到远程仓库" class="headerlink" title="将本地分支推送到远程仓库"></a>将本地分支推送到远程仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 远程分支不存在的情况</span></span><br><span class="line"><span class="comment">### remote-name: 通常是 origin； local-branch-name: 本地分支名； remote-branch-name: 要创建的远程分支名</span></span><br><span class="line"> git push &lt;remote-name&gt; &lt;<span class="built_in">local</span>-branch-name&gt;:&lt;remote-branch-name&gt;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">## 远程分支存在的情况（但是没有关联）</span></span><br><span class="line"> <span class="comment">### 首先关联本地分支和远程分支</span></span><br><span class="line"> git push -u &lt;remote-name&gt; &lt;branch-name&gt;</span><br><span class="line"> <span class="comment">#### or</span></span><br><span class="line"> git branch --<span class="built_in">set</span>-upstream-to=&lt;remote-name&gt;/&lt;remote-branch&gt; &lt;<span class="built_in">local</span>-branch&gt;</span><br></pre></td></tr></table></figure><h3 id="更新分支"><a href="#更新分支" class="headerlink" title="更新分支"></a>更新分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 跟新本地分支</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment">### 更新远程分支信息</span></span><br><span class="line">git remote update</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用远程的代码强制更新本地的代码 （强制本地代码和线上的一致）v1.0</span></span><br><span class="line">git checkout .</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用远程的分支代码强制更新本地的代码（强制本地代码和线上的一致）v2.0</span></span><br><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><h3 id="创建tag"><a href="#创建tag" class="headerlink" title="创建tag"></a>创建tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a &lt;tag-name&gt; -m &lt;tag-message&gt;</span><br></pre></td></tr></table></figure><h3 id="删除tag"><a href="#删除tag" class="headerlink" title="删除tag"></a>删除tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 删除本地tag</span></span><br><span class="line">git tag -d &lt;tag-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 删除远端tag</span></span><br><span class="line">git push --delete &lt;repo-name&gt; &lt;tag-name&gt;</span><br><span class="line">or </span><br><span class="line">git push &lt;repo-name&gt; :refs/tags/&lt;tag-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### e.g.: git push --delete origin tag-r0</span></span><br><span class="line"><span class="comment">### e.g.: git push origin :refs/tags/tag-r0</span></span><br></pre></td></tr></table></figure><h3 id="查看tag"><a href="#查看tag" class="headerlink" title="查看tag"></a>查看tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 查看所有的tag</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看单个tag</span></span><br><span class="line">git tag -l &lt;tag-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看一个tag的具体信息</span></span><br><span class="line">git show &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><h3 id="推送tag到远程"><a href="#推送tag到远程" class="headerlink" title="推送tag到远程"></a>推送tag到远程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## push single tag</span></span><br><span class="line">git push &lt;remote-name&gt; &lt;tag-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">## push all tags (not recommended)</span></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><h3 id="撤销工作目录所有的更改（包括新创建的文件）"><a href="#撤销工作目录所有的更改（包括新创建的文件）" class="headerlink" title="撤销工作目录所有的更改（包括新创建的文件）"></a>撤销工作目录所有的更改（包括新创建的文件）</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git reset --hard <span class="comment"># removes staged and working directory changes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## !! be very careful with these !!</span></span><br><span class="line"><span class="comment">## you may end up deleting what you don't want to</span></span><br><span class="line"><span class="comment">## read comments and manual.</span></span><br><span class="line">git clean -f -d <span class="comment"># remove untracked</span></span><br><span class="line">git clean -f -x -d <span class="comment"># CAUTION: as above but removes ignored files like config.</span></span><br><span class="line">git clean -fxd :/ <span class="comment"># CAUTION: as above, but cleans untracked and ignored files through the entire repo (without :/, the operation affects only the current directory)</span></span><br></pre></td></tr></table></figure><h3 id="git仓库存储账号密码，不用每次都输入账号密码（针对https协议的仓库地址）"><a href="#git仓库存储账号密码，不用每次都输入账号密码（针对https协议的仓库地址）" class="headerlink" title="git仓库存储账号密码，不用每次都输入账号密码（针对https协议的仓库地址）"></a>git仓库存储账号密码，不用每次都输入账号密码（针对https协议的仓库地址）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git config credential.helper store</span><br><span class="line">$ git push https://github.com/owner/repo.git</span><br><span class="line"></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: &lt;USERNAME&gt;</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">'https://USERNAME@github.com'</span>: &lt;PASSWORD&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行完上面的命令之后，以后所有的push都不再需要提交代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 如果想让此功能有个时间限制，可以这样</span></span><br><span class="line"></span><br><span class="line">git config --global credential.helper <span class="string">'cache --timeout 7200'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 7200秒后失效，push需要重新输入账号密码</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/zayfen/image/upload/v1568171685/img/l8yeyxvtfw6kplg1ci67.png&quot; alt=&quot;git flow&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;漂亮打印git-log&quot;&gt;&lt;a href=&quot;#漂亮打印git-log&quot; class=&quot;headerlink&quot; title=&quot;漂亮打印git log&quot;&gt;&lt;/a&gt;漂亮打印git log&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; --graph --pretty=format:&lt;span class=&quot;string&quot;&gt;&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset&#39;&lt;/span&gt; --abbrev-commit --date=relative&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;添加修改或者新文件到待commit队列&quot;&gt;&lt;a href=&quot;#添加修改或者新文件到待commit队列&quot; class=&quot;headerlink&quot; title=&quot;添加修改或者新文件到待commit队列&quot;&gt;&lt;/a&gt;添加修改或者新文件到待commit队列&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### add 的文件是支持正则匹配的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add &amp;lt;file(s)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### add all changes to commiter queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### 查看某个commit的修改内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git show &amp;lt;commit-id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff &amp;lt;commit-id&amp;gt;^!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;##### e.g. git show d34ff657f5   git diff d34ff657f5^!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### 提交已添加的文件到本地仓库并创建一个新的版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;commit message&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### also can combine git add &amp;amp; git commit in one command&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;commit message&quot;&lt;/span&gt; -a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="git" scheme="https://zayfen.com/categories/git/"/>
    
    
      <category term="git" scheme="https://zayfen.com/tags/git/"/>
    
  </entry>
  
</feed>
